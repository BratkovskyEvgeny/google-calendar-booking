import logging
import os
import smtplib
from datetime import datetime, timedelta
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

import pytz
import streamlit as st
from dotenv import load_dotenv
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π Streamlit)
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á",
    page_icon="üìÖ",
    layout="centered",
    initial_sidebar_state="collapsed",
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
logs_dir = os.path.join(os.getcwd(), "logs")
if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)

# –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
log_file = os.path.join(logs_dir, "email_logs.txt")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8",
)

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
st.sidebar.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö")
st.sidebar.info(f"–§–∞–π–ª –ª–æ–≥–æ–≤: {log_file}")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
if st.sidebar.button("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"):
    try:
        with open(log_file, "r", encoding="utf-8") as f:
            logs = f.read()
            if logs:
                st.sidebar.code(logs)
            else:
                st.sidebar.info("–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç")
    except FileNotFoundError:
        st.sidebar.error("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_email_operation(message, level="info"):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
    if level == "info":
        logging.info(message)
    elif level == "error":
        logging.error(message)
    elif level == "warning":
        logging.warning(message)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return f"[{timestamp}] {message}"


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏
st.markdown(
    """
<style>
    .header-container {
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 2rem auto;
        flex-direction: column;
        max-width: 800px;
        background-color: #2b2b2b;
        padding: 2rem;
        border-radius: 8px;
        border: 1px solid #3c3f41;
    }
    .stButton button {
        width: 100%;
        border-radius: 4px;
        background-color: #2b2b2b;
        border: 1px solid #3c3f41;
        padding: 8px 4px;
        font-size: 0.9rem;
        transition: all 0.2s ease;
        margin: 1px 0;
        color: #a9b7c6;
    }
    .stButton button:hover {
        background-color: #4dabf7;
        color: #2b2b2b;
        border-color: #4dabf7;
        transform: translateY(-1px);
    }
    .date-header {
        background-color: #323232;
        color: #a9b7c6;
        padding: 10px 15px;
        border-radius: 4px;
        margin: 12px 0 8px;
        font-size: 0.9rem;
        border: 1px solid #3c3f41;
    }
    .booking-form {
        background-color: #2b2b2b;
        padding: 25px;
        border-radius: 8px;
        margin-top: 30px;
        border: 1px solid #3c3f41;
    }
    h1 {
        color: #4dabf7;
        text-align: center;
        margin: 0;
        font-size: 2rem;
        font-weight: 600;
        letter-spacing: 1px;
    }
    .subtitle {
        color: #a9b7c6;
        text-align: center;
        margin: 0.5rem 0 0;
        font-size: 1.1rem;
        font-weight: 400;
        opacity: 0.9;
    }
    .calendar-container {
        background-color: #2b2b2b;
        padding: 20px;
        border-radius: 8px;
        border: 1px solid #3c3f41;
        margin: 0 -1rem;
    }
    .date-header h3 {
        margin: 0;
        font-size: 1rem;
        font-weight: 500;
        color: #a9b7c6;
    }
    .slot-grid {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 6px;
        padding: 6px 0;
    }
    .stApp {
        background-color: #1e1f22;
    }
    div[data-testid="stToolbar"] {
        display: none;
    }
    #MainMenu {
        display: none;
    }
    footer {
        display: none;
    }
    div[data-testid="stDecoration"] {
        display: none;
    }
    div[data-testid="stStatusWidget"] {
        display: none;
    }
    .stApp > header {
        display: none;
    }
    .stForm button {
        background-color: #4dabf7;
        color: #2b2b2b;
        font-weight: 500;
        padding: 10px 20px;
        width: 100%;
        margin-top: 10px;
        font-size: 1rem;
    }
    .stForm button:hover {
        background-color: #339af0;
        border-color: #339af0;
    }
    .form-description {
        color: #a9b7c6;
        font-size: 0.9rem;
        margin: 10px 0;
        opacity: 0.8;
    }
    .form-header {
        color: #4dabf7;
        font-size: 1.2rem;
        margin-bottom: 15px;
        font-weight: 500;
    }
    /* Darcula theme additional styles */
    .stTextInput input {
        background-color: #2b2b2b !important;
        color: #a9b7c6 !important;
        border: 1px solid #3c3f41 !important;
        padding: 10px !important;
        font-size: 1rem !important;
    }
    .stTextInput input:focus {
        border-color: #4dabf7 !important;
        box-shadow: none !important;
    }
    div[data-baseweb="base-input"] {
        background-color: #2b2b2b !important;
    }
    .stMarkdown {
        color: #a9b7c6 !important;
    }
    p {
        color: #a9b7c6 !important;
    }
    .stAlert {
        background-color: #2b2b2b !important;
        color: #a9b7c6 !important;
        border: 1px solid #3c3f41 !important;
    }
    .stAlert > div {
        color: #a9b7c6 !important;
    }
    /* Fix for streamlit components */
    button[kind="primary"] {
        background-color: #4dabf7 !important;
        color: #2b2b2b !important;
    }
    button[kind="primary"]:hover {
        background-color: #339af0 !important;
    }
    .stButton button.unavailable {
        background-color: #3c2222 !important;
        color: #ff6b6b !important;
        border-color: #ff6b6b !important;
        cursor: not-allowed !important;
        opacity: 0.7;
    }
    .stButton button.unavailable:hover {
        background-color: #3c2222 !important;
        color: #ff6b6b !important;
        border-color: #ff6b6b !important;
        transform: none !important;
    }
    button.unavailable {
        background-color: #3c2222 !important;
        color: #ff6b6b !important;
        border: 1px solid #ff6b6b !important;
        cursor: not-allowed !important;
        opacity: 0.7 !important;
        pointer-events: none !important;
    }
    button.unavailable:hover {
        background-color: #3c2222 !important;
        color: #ff6b6b !important;
        border-color: #ff6b6b !important;
        transform: none !important;
    }
    .slot-status {
        display: flex;
        gap: 20px;
        margin: 20px 0;
        justify-content: center;
    }
    .status-item {
        display: flex;
        align-items: center;
        gap: 8px;
    }
    .status-dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
    }
    .status-dot.available {
        background: rgba(43, 43, 43, 0.7);
        border: 1px solid rgba(255, 215, 0, 0.1);
    }
    .status-dot.unavailable {
        background: linear-gradient(145deg, #dc3545, #c82333);
    }
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π */
    .messages-container {
        position: fixed;
        top: 20px;
        right: 20px;
        width: 300px;
        z-index: 9999;
        background: rgba(43, 43, 43, 0.95);
        border-radius: 8px;
        border: 1px solid rgba(255, 215, 0, 0.2);
        backdrop-filter: blur(10px);
        padding: 10px;
        max-height: 80vh;
        overflow-y: auto;
    }

    .message {
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 6px;
        font-size: 0.9rem;
        animation: fadeIn 0.3s ease;
    }

    .message.info {
        background: rgba(13, 110, 253, 0.2);
        border: 1px solid rgba(13, 110, 253, 0.3);
        color: #8bb9fe;
    }

    .message.success {
        background: rgba(25, 135, 84, 0.2);
        border: 1px solid rgba(25, 135, 84, 0.3);
        color: #75b798;
    }

    .message.error {
        background: rgba(220, 53, 69, 0.2);
        border: 1px solid rgba(220, 53, 69, 0.3);
        color: #ea868f;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */
    div[data-testid="stNotificationContent"] {
        animation: none !important;
        transition: opacity 0.5s ease !important;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–ª–æ—Ç–æ–≤ */
    .stButton > button {
        width: 100%;
        padding: 10px;
        margin: 5px 0;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.3s ease;
        text-align: center;
        color: #a9b7c6;
        background: rgba(43, 43, 43, 0.7);
        border: 1px solid rgba(255, 215, 0, 0.1);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
    }

    .stButton > button:hover {
        transform: translateY(-2px) scale(1.02);
        box-shadow: 0 4px 15px rgba(255, 165, 0, 0.3);
        background: rgba(255, 165, 0, 0.2) !important;
        border-color: rgba(255, 165, 0, 0.4) !important;
        animation: pulse 1.5s infinite;
    }

    /* –°—Ç–∏–ª—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ */
    .stButton > button[aria-pressed="true"] {
        background: rgba(255, 165, 0, 0.4) !important;
        border-color: rgba(255, 165, 0, 0.6) !important;
        color: #ffffff !important;
        box-shadow: 0 4px 20px rgba(255, 165, 0, 0.4);
        transform: translateY(-2px) scale(1.02);
    }

    @keyframes pulse {
        0% {
            box-shadow: 0 4px 15px rgba(255, 165, 0, 0.3);
        }
        50% {
            box-shadow: 0 4px 20px rgba(255, 165, 0, 0.4);
        }
        100% {
            box-shadow: 0 4px 15px rgba(255, 165, 0, 0.3);
        }
    }

    .stButton > button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            90deg,
            transparent,
            rgba(255, 165, 0, 0.2),
            transparent
        );
        transition: 0.5s;
    }

    .stButton > button:hover::before {
        left: 100%;
    }

    .stButton > button.unavailable {
        background: linear-gradient(145deg, #dc3545, #c82333) !important;
        cursor: not-allowed;
        opacity: 0.7;
    }

    .stButton > button.unavailable:hover {
        transform: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        background: linear-gradient(145deg, #dc3545, #c82333) !important;
        animation: none;
    }

    .stButton > button.unavailable::before {
        display: none;
    }

    /* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω */
    [data-testid="stAppViewContainer"] {
        background: linear-gradient(-45deg, #1e1e1e, #2b2b2b, #1e1e1e, #2d2d2d);
        background-size: 400% 400%;
        animation: gradientBG 15s ease infinite;
    }

    @keyframes gradientBG {
        0% {
            background-position: 0% 50%;
        }
        50% {
            background-position: 100% 50%;
        }
        100% {
            background-position: 0% 50%;
        }
    }

    /* –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */
    .header-container {
        text-align: center;
        padding: 3rem 1.5rem;
        margin-bottom: 2.5rem;
        background: rgba(43, 43, 43, 0.9);
        border-radius: 20px;
        backdrop-filter: blur(25px);
        border: 1px solid rgba(255, 215, 0, 0.2);
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
        transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        animation: fadeInDown 1s ease-out;
    }
    
    @keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .header-container:hover {
        border-color: rgba(255, 215, 0, 0.4);
        box-shadow: 0 15px 50px rgba(255, 215, 0, 0.2);
        transform: translateY(-8px);
    }
    
    .header-container h1 {
        font-size: 2.5rem;
        font-weight: 900;
        margin-bottom: 0.8rem;
        background: linear-gradient(120deg, 
            #ffd700 0%, 
            #ffc107 25%, 
            #ffab00 50%,
            #ffd700 75%,
            #ffc107 100%);
        background-size: 200% auto;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.4);
        letter-spacing: 2px;
        line-height: 1.4;
        animation: shine 3s linear infinite;
    }
    
    @keyframes shine {
        to {
            background-position: 200% center;
        }
    }
    
    .subtitle {
        font-size: 1.4rem;
        margin: 1.2rem 0;
        letter-spacing: 3px;
        font-weight: 600;
        text-transform: uppercase;
        background: linear-gradient(120deg, 
            #ffffff 0%, 
            #e0e0e0 50%,
            #ffffff 100%);
        background-size: 200% auto;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        opacity: 0.95;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        animation: shine 4s linear infinite, pulse 2s ease-in-out infinite;
    }
    
    .form-description {
        color: #e0e0e0;
        line-height: 1.8;
        font-size: 1.1rem;
        margin: 2rem 0 0;
        max-width: 800px;
        margin-left: auto;
        margin-right: auto;
        opacity: 0.9;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
    }

    @keyframes pulse {
        0% {
            transform: scale(1);
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        50% {
            transform: scale(1.05);
            text-shadow: 3px 3px 6px rgba(255, 215, 0, 0.4);
        }
        100% {
            transform: scale(1);
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
    }

    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–ª–æ—Ç–æ–≤ */
    .stButton > button {
        width: 100%;
        padding: 12px;
        margin: 5px 0;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        text-align: center;
        color: #a9b7c6;
        background: rgba(43, 43, 43, 0.7);
        border: 1px solid rgba(255, 215, 0, 0.1);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        position: relative;
        overflow: hidden;
        backdrop-filter: blur(10px);
    }

    .stButton > button:hover {
        transform: translateY(-3px) scale(1.02);
        box-shadow: 0 8px 15px rgba(255, 165, 0, 0.3);
        background: rgba(255, 165, 0, 0.15) !important;
        border-color: rgba(255, 165, 0, 0.4) !important;
        animation: pulseGlow 2s infinite;
    }

    @keyframes pulseGlow {
        0% {
            box-shadow: 0 4px 15px rgba(255, 165, 0, 0.3);
        }
        50% {
            box-shadow: 0 4px 25px rgba(255, 165, 0, 0.5);
        }
        100% {
            box-shadow: 0 4px 15px rgba(255, 165, 0, 0.3);
        }
    }

    /* –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
    .stButton > button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            90deg,
            transparent,
            rgba(255, 165, 0, 0.2),
            transparent
        );
        transition: 0.8s;
        transform: skewX(-15deg);
    }

    .stButton > button:hover::before {
        left: 100%;
        transition: 0.8s;
    }

    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞ */
    .slot-status {
        display: flex;
        gap: 30px;
        margin: 20px 0;
        justify-content: center;
        padding: 15px;
        background: rgba(43, 43, 43, 0.8);
        border-radius: 12px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 215, 0, 0.1);
        transform: translateY(0);
        transition: all 0.3s ease;
    }

    .slot-status:hover {
        transform: translateY(-2px);
        border-color: rgba(255, 215, 0, 0.2);
    }

    .status-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px 16px;
        border-radius: 8px;
        background: rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }

    .status-item:hover {
        background: rgba(0, 0, 0, 0.3);
        transform: translateY(-1px);
    }

    .status-dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        transition: all 0.3s ease;
    }

    .status-dot.available {
        background: rgba(43, 43, 43, 0.7);
        border: 1px solid rgba(255, 215, 0, 0.1);
        animation: glowPulse 2s infinite;
    }

    @keyframes glowPulse {
        0% {
            box-shadow: 0 0 5px rgba(255, 215, 0, 0.3);
        }
        50% {
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }
        100% {
            box-shadow: 0 0 5px rgba(255, 215, 0, 0.3);
        }
    }

    /* –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */
    .booking-form {
        background: rgba(43, 43, 43, 0.8);
        border-radius: 16px;
        padding: 2rem;
        margin: 1rem 0;
        border: 1px solid rgba(255, 215, 0, 0.1);
        backdrop-filter: blur(20px);
        transform: translateY(0);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        animation: slideUp 0.5s ease-out;
    }

    .booking-form:hover {
        transform: translateY(-5px);
        border-color: rgba(255, 215, 0, 0.2);
        box-shadow: 0 8px 32px rgba(255, 215, 0, 0.1);
    }

    @keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ */
    .stTextInput > div > div {
        background: rgba(43, 43, 43, 0.7) !important;
        border: 1px solid rgba(255, 215, 0, 0.1) !important;
        border-radius: 8px !important;
        transition: all 0.3s ease !important;
    }

    .stTextInput > div > div:hover,
    .stTextInput > div > div:focus-within {
        border-color: rgba(255, 215, 0, 0.3) !important;
        box-shadow: 0 0 15px rgba(255, 215, 0, 0.1) !important;
    }

    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
    .stAlert {
        background: rgba(43, 43, 43, 0.8) !important;
        backdrop-filter: blur(10px) !important;
        border-radius: 12px !important;
        border: 1px solid rgba(255, 215, 0, 0.1) !important;
        animation: slideIn 0.5s ease-out !important;
    }

    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    /* –ú–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
    @media screen and (max-width: 768px) {
        .header-container {
            padding: 2rem 0.8rem;
            margin-bottom: 2rem;
            border-radius: 16px;
        }
        
        .header-container h1 {
            font-size: 1.8rem;
            letter-spacing: 1px;
            margin-bottom: 1rem;
            line-height: 1.3;
            padding: 0 0.3rem;
        }

        .mobile-break {
            display: block;
        }
        
        .subtitle {
            font-size: 1.2rem;
            letter-spacing: 1.5px;
            margin: 1rem 0;
            line-height: 1.6;
            padding: 0 0.5rem;
            word-spacing: 2px;
        }
        
        .form-description {
            font-size: 0.9rem;
            line-height: 1.5;
            margin: 1.5rem 0 0;
            padding: 0 0.8rem;
        }
    }

    /* –ú–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
    @media screen and (max-width: 480px) {
        .header-container {
            padding: 1.5rem 0.6rem;
            margin-bottom: 1.5rem;
        }
        
        .header-container h1 {
            font-size: 1.6rem;
            letter-spacing: 0.5px;
            padding: 0 0.2rem;
        }
        
        .subtitle {
            font-size: 1.1rem;
            letter-spacing: 1px;
            padding: 0 0.3rem;
            word-spacing: 1px;
        }
        
        .form-description {
            font-size: 0.85rem;
            line-height: 1.4;
            margin: 1.2rem 0 0;
            padding: 0 0.5rem;
        }
    }

    /* –î–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ */
    @media screen and (max-width: 360px) {
        .header-container h1 {
            font-size: 1.4rem;
            letter-spacing: 0px;
            padding: 0 0.2rem;
        }
        
        .subtitle {
            font-size: 1rem;
            letter-spacing: 0.5px;
            word-spacing: 1px;
        }
    }

    /* –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–æ–≤ */
    @media screen and (min-width: 769px) {
        .mobile-break {
            display: none;
        }
        
        .header-container h1 {
            font-size: 2.5rem;
            margin-bottom: 1.5rem;
        }
        
        .subtitle {
            font-size: 1.6rem;
            letter-spacing: 2px;
            word-spacing: 4px;
            margin: 1.5rem 0;
        }
    }
</style>
""",
    unsafe_allow_html=True,
)

# –°–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∏ —Ñ—É—Ç–µ—Ä
hide_streamlit_style = """
<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
</style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Streamlit secrets
SCOPES = ["https://www.googleapis.com/auth/calendar"]
CALENDAR_ID = st.secrets["calendar_id"]
GMAIL_SENDER = st.secrets["gmail_sender"]
GMAIL_APP_PASSWORD = st.secrets["gmail_app_password"]
CLIENT_ID = st.secrets["google_client_id"]
CLIENT_SECRET = st.secrets["google_client_secret"]

# –£–¥–∞–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
# st.write(f"Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {GMAIL_SENDER}")
# st.write(f"–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {len(GMAIL_APP_PASSWORD)}")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
WEEKDAYS = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}


def get_week_dates():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥"""
    today = datetime.now()
    week_dates = []
    for i in range(7):
        date = today + timedelta(days=i)
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        weekday_name = WEEKDAYS[date.strftime("%A")]
        week_dates.append(
            {"date": date, "formatted": f"{weekday_name}, {date.strftime('%d.%m')}"}
        )
    return week_dates


def get_calendar_service():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å Google Calendar —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
        required_secrets = [
            "google_client_id",
            "google_client_secret",
            "google_refresh_token",
            "token_uri",
        ]

        if not all(key in st.secrets for key in required_secrets):
            st.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ OAuth")
            return None

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Credentials —Å refresh token
        creds = Credentials(
            None,  # access token –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ None
            refresh_token=st.secrets["google_refresh_token"],
            token_uri=st.secrets["token_uri"],
            client_id=st.secrets["google_client_id"],
            client_secret=st.secrets["google_client_secret"],
            scopes=["https://www.googleapis.com/auth/calendar"],
        )

        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ creds –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç –Ω–æ–≤—ã–π access token
        # –∏—Å–ø–æ–ª—å–∑—É—è refresh token
        service = build("calendar", "v3", credentials=creds)
        return service

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
        return None


def get_credentials():
    """–ü–æ–ª—É—á–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Google Calendar API."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö
        if all(
            key in st.secrets
            for key in [
                "google_client_id",
                "google_client_secret",
                "google_refresh_token",
            ]
        ):
            return Credentials(
                None,  # –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
                refresh_token=st.secrets["google_refresh_token"],
                token_uri="https://oauth2.googleapis.com/token",
                client_id=st.secrets["google_client_id"],
                client_secret=st.secrets["google_client_secret"],
                scopes=["https://www.googleapis.com/auth/calendar"],
            )
        else:
            st.error(
                "–ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ OAuth. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None


def get_available_slots(date_obj):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        service = get_calendar_service()
        if not service:
            return []

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–Ω—è
        start_time = datetime.combine(date_obj, datetime.min.time())
        end_time = datetime.combine(date_obj, datetime.max.time())

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        events_result = (
            service.events()
            .list(
                calendarId=st.secrets["calendar_id"],
                timeMin=start_time.isoformat() + "Z",
                timeMax=end_time.isoformat() + "Z",
                singleEvents=True,
                orderBy="startTime",
            )
            .execute()
        )
        events = events_result.get("items", [])

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        all_slots = []
        current_time = datetime.combine(date_obj, datetime.min.time())
        while current_time < end_time:
            if current_time.hour >= 9 and current_time.hour < 18:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
                all_slots.append(current_time)
            current_time += timedelta(minutes=30)

        # –û—Ç–º–µ—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
        busy_slots = set()
        for event in events:
            event_start = datetime.fromisoformat(
                event["start"]["dateTime"].replace("Z", "+00:00")
            )
            event_end = datetime.fromisoformat(
                event["end"]["dateTime"].replace("Z", "+00:00")
            )

            current = event_start
            while current < event_end:
                busy_slots.add(current)
                current += timedelta(minutes=30)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        available_slots = []
        for slot in all_slots:
            if slot not in busy_slots:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                weekday = WEEKDAYS[slot.strftime("%A")]
                available_slots.append(
                    {
                        "time": slot,
                        "formatted": f"{weekday}, {slot.strftime('%d.%m')} {slot.strftime('%H:%M')}",
                    }
                )

        return available_slots

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: {str(e)}")
        return []


def send_email_notification(slot_time, booker_email):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not GMAIL_SENDER:
            error_msg = log_email_operation(
                "–ù–µ —É–∫–∞–∑–∞–Ω email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", "error"
            )
            st.session_state.messages.append(("error", error_msg))
            st.error(error_msg)
            return False

        if not GMAIL_APP_PASSWORD:
            error_msg = log_email_operation(
                "–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Gmail –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", "error"
            )
            st.session_state.messages.append(("error", error_msg))
            st.error(error_msg)
            return False

        info_msg = log_email_operation(
            f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ email –Ω–∞ –∞–¥—Ä–µ—Å: {booker_email}"
        )
        st.session_state.messages.append(("info", info_msg))
        st.info(info_msg)

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart("alternative")
        msg["From"] = GMAIL_SENDER
        msg["To"] = booker_email
        msg["Subject"] = "üéâ –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!"

        log_email_operation(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º–æ–π: {msg['Subject']}")

        # HTML –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞
        html_body = f"""
        <html>
        <body style="font-family: Arial, sans-serif; color: #333; max-width: 600px; margin: 0 auto;">
            <div style="padding: 20px; background: #f8f9fa; border-radius: 10px;">
                <h2 style="color: #1e88e5; margin-bottom: 20px;">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
                
                <div style="background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                    <h3 style="color: #333; margin-top: 0;">–î–µ—Ç–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∏:</h3>
                    <p><strong>üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</strong> {slot_time}</p>
                    <p><strong>‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> 1 —á–∞—Å</p>
                    <p><strong>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:</strong> {booker_email}</p>
                </div>
                
                <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                    <h4 style="color: #1e88e5; margin-top: 0;">–ß—Ç–æ –¥–∞–ª—å—à–µ?</h4>
                    <ul style="margin: 10px 0; padding-left: 20px;">
                        <li>–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ Google Calendar</li>
                        <li>–í –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Meet</li>
                        <li>–ó–∞ —á–∞—Å –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–∏–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</li>
                        <li>–ó–∞ 10 –º–∏–Ω—É—Ç –ø–æ—è–≤–∏—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</li>
                    </ul>
                </div>
                
                <div style="background: #f5f5f5; padding: 15px; border-radius: 8px;">
                    <p style="margin: 0;"><strong>–ù—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É?</strong><br>
                    –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ Google Calendar.</p>
                </div>
            </div>
        </body>
        </html>
        """

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        text_body = f"""
        üéâ –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!

        üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {slot_time}
        ‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å
        üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {booker_email}

        –ß—Ç–æ –¥–∞–ª—å—à–µ?
        - –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ Google Calendar
        - –í –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Meet
        - –ó–∞ —á–∞—Å –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –ø—Ä–∏–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        - –ó–∞ 10 –º–∏–Ω—É—Ç –ø–æ—è–≤–∏—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

        –ù—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É?
        –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ Google Calendar.
        """

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –≤–µ—Ä—Å–∏–∏ –≤ –ø–∏—Å—å–º–æ
        msg.attach(MIMEText(text_body, "plain"))
        msg.attach(MIMEText(html_body, "html"))

        st.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Gmail...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        try:
            with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                log_email_operation("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å smtp.gmail.com")

                try:
                    log_email_operation(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å email: {GMAIL_SENDER}")
                    server.login(GMAIL_SENDER, GMAIL_APP_PASSWORD)
                    log_email_operation("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Gmail")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
                    log_email_operation("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–ø–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É...")
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
                    msg_copy = MIMEMultipart("alternative")
                    msg_copy["From"] = GMAIL_SENDER
                    msg_copy["To"] = GMAIL_SENDER
                    msg_copy["Subject"] = f"üìã –ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞: {booker_email}"
                    msg_copy.attach(MIMEText(text_body, "plain"))
                    msg_copy.attach(MIMEText(html_body, "html"))
                    server.send_message(msg_copy)
                    log_email_operation("–ö–æ–ø–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–∏—Å—å–º–æ —É—á–∞—Å—Ç–Ω–∏–∫—É
                    log_email_operation(
                        f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —É—á–∞—Å—Ç–Ω–∏–∫—É ({booker_email})..."
                    )
                    server.send_message(msg)
                    log_email_operation("–ü–∏—Å—å–º–æ —É—á–∞—Å—Ç–Ω–∏–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

                    success_msg = log_email_operation(
                        "‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"
                    )
                    st.success(success_msg)
                    return True

                except smtplib.SMTPAuthenticationError as auth_error:
                    error_msg = log_email_operation(
                        f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Gmail: {str(auth_error)}", "error"
                    )
                    st.error(error_msg)
                    return False

        except smtplib.SMTPException as smtp_error:
            error_msg = log_email_operation(
                f"–û—à–∏–±–∫–∞ SMTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(smtp_error)}", "error"
            )
            st.error(error_msg)
            return False

    except Exception as e:
        error_msg = log_email_operation(
            f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}", "error"
        )
        st.error(error_msg)
        return False


def create_calendar_event(slot_time, booker_email):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    service = get_calendar_service()

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = pytz.timezone("Europe/Moscow")
    if slot_time.tzinfo != moscow_tz:
        slot_time = slot_time.astimezone(moscow_tz)

    event = {
        "summary": f"üë• –í—Å—Ç—Ä–µ—á–∞ —Å {booker_email}",
        "description": f"""
–î–µ—Ç–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∏:

üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {booker_email}
‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å
üìç –ú–µ—Å—Ç–æ: Google Meet (—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

–≠—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞ –±—ã–ª–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á.
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ü–∏–∏ –≤—ã—à–µ.

–ù—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º? –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ email: {booker_email}
""",
        "start": {
            "dateTime": slot_time.isoformat(),
            "timeZone": "Europe/Moscow",
        },
        "end": {
            "dateTime": (slot_time + timedelta(hours=1)).isoformat(),
            "timeZone": "Europe/Moscow",
        },
        "attendees": [
            {"email": booker_email},
            {"email": GMAIL_SENDER},
        ],
        "sendUpdates": "all",  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        "reminders": {
            "useDefault": False,
            "overrides": [
                {"method": "email", "minutes": 60},  # Email –∑–∞ —á–∞—Å –¥–æ –≤—Å—Ç—Ä–µ—á–∏
                {
                    "method": "popup",
                    "minutes": 10,
                },  # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç
            ],
        },
        "conferenceData": {
            "createRequest": {
                "requestId": f"meeting_{int(datetime.now().timestamp())}",
                "conferenceSolutionKey": {"type": "hangoutsMeet"},
            }
        },
    }

    try:
        event = (
            service.events()
            .insert(
                calendarId="primary",
                body=event,
                conferenceDataVersion=1,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Google Meet
                sendUpdates="all",  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            )
            .execute()
        )
        return True
    except Exception as e:
        st.error(f"Error creating event: {str(e)}")
        return False


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π
    if "show_all_days" not in st.session_state:
        st.session_state.show_all_days = False

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    st.markdown(
        """
        <style>
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π */
        .messages-container {
            position: fixed;
            top: 20px;
            right: 20px;
            width: 300px;
            z-index: 9999;
            background: rgba(43, 43, 43, 0.95);
            border-radius: 8px;
            border: 1px solid rgba(255, 215, 0, 0.2);
            backdrop-filter: blur(10px);
            padding: 10px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .message {
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 6px;
            font-size: 0.9rem;
            animation: fadeIn 0.3s ease;
        }

        .message.info {
            background: rgba(13, 110, 253, 0.2);
            border: 1px solid rgba(13, 110, 253, 0.3);
            color: #8bb9fe;
        }

        .message.success {
            background: rgba(25, 135, 84, 0.2);
            border: 1px solid rgba(25, 135, 84, 0.3);
            color: #75b798;
        }

        .message.error {
            background: rgba(220, 53, 69, 0.2);
            border: 1px solid rgba(220, 53, 69, 0.3);
            color: #ea868f;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */
        div[data-testid="stNotificationContent"] {
            animation: none !important;
            transition: opacity 0.5s ease !important;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if st.session_state.messages:
        messages_html = '<div class="messages-container">'
        for msg_type, msg_text in st.session_state.messages:
            messages_html += f'<div class="message {msg_type}">{msg_text}</div>'
        messages_html += "</div>"
        st.markdown(messages_html, unsafe_allow_html=True)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
    st.markdown(
        """
        <style>
        /* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ */
        [data-testid="stAppViewContainer"] {
            background: linear-gradient(135deg, #1e1e1e 0%, #2b2b2b 100%);
            color: #e0e0e0;
            padding: 0 !important;
        }
        
        [data-testid="stVerticalBlock"] {
            padding: 0 !important;
            gap: 0 !important;
        }
        
        /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */
        .header-container {
            text-align: center;
            padding: 2.5rem 1rem;
            margin-bottom: 2rem;
            background: rgba(43, 43, 43, 0.8);
            border-radius: 16px;
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 215, 0, 0.15);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            transition: all 0.4s ease;
        }
        
        .header-container:hover {
            border-color: rgba(255, 215, 0, 0.3);
            box-shadow: 0 12px 40px rgba(255, 215, 0, 0.15);
            transform: translateY(-5px);
        }
        
        .header-container h1 {
            font-size: 2.2rem;
            font-weight: 800;
            margin-bottom: 0.5rem;
            background: linear-gradient(120deg, #ffd700 0%, #ffc107 50%, #ffab00 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            letter-spacing: 1px;
            line-height: 1.3;
        }
        
        .subtitle {
            font-size: 1.3rem;
            color: #e0e0e0;
            margin: 1rem 0;
            letter-spacing: 2px;
            font-weight: 500;
            text-transform: uppercase;
            background: linear-gradient(120deg, #ffffff 0%, #e0e0e0 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            opacity: 0.9;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
        }
        
        .form-description {
            color: #d4d4d4;
            line-height: 1.6;
            font-size: 1rem;
            margin: 1.5rem 0 0;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }
        
        /* –°—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–æ–≤ */
        .slot-status {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin: 0.5rem 0;
            padding: 0.5rem;
            background: rgba(43, 43, 43, 0.7);
            border-radius: 8px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 215, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        /* –ß–µ–∫–±–æ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π */
        .show-more-days {
            background: rgba(43, 43, 43, 0.7);
            border-radius: 8px;
            padding: 0.5rem;
            margin: 0.5rem 0;
            border: 1px solid rgba(255, 215, 0, 0.1);
            transition: all 0.3s ease;
            text-align: center;
        }
        
        /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—Ç—ã */
        .date-header {
            background: rgba(43, 43, 43, 0.7);
            border-radius: 8px;
            padding: 0.5rem;
            margin: 0.5rem 0;
            border: 1px solid rgba(255, 215, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .date-header h3 {
            color: #ffd700;
            font-size: 1rem;
            font-weight: 600;
            margin: 0;
        }
        
        /* –ö–Ω–æ–ø–∫–∏ —Å–ª–æ—Ç–æ–≤ */
        .stButton button {
            width: 100%;
            padding: 0.5rem;
            border-radius: 6px;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            background: rgba(255, 215, 0, 0.1);
            color: #ffd700;
            border: 1px solid rgba(255, 215, 0, 0.2);
            margin: 0 !important;
        }
        
        /* –§–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */
        .booking-form {
            background: rgba(43, 43, 43, 0.7);
            border-radius: 8px;
            padding: 1rem;
            margin: 0.5rem 0;
            border: 1px solid rgba(255, 215, 0, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .form-header {
            font-size: 1.2rem;
            font-weight: 600;
            color: #ffd700;
            margin-bottom: 0.5rem;
        }
        
        /* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ Streamlit */
        [data-testid="stHorizontalBlock"] {
            gap: 0.25rem !important;
            padding: 0 !important;
        }
        
        /* –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã */
        .stTextInput {
            margin: 0 !important;
        }
        
        .stTextInput > div {
            margin: 0 !important;
        }
        
        .stForm > div {
            margin-bottom: 0 !important;
        }
        
        .stForm [data-testid="stFormSubmitButton"] {
            margin: 0 !important;
        }
        
        /* –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É —á–µ–∫–±–æ–∫—Å–∞ */
        .stCheckbox {
            margin: 0 !important;
        }
        
        .stCheckbox > div {
            margin: 0 !important;
        }
        
        /* –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É –∞–ª–µ—Ä—Ç–æ–≤ */
        .stAlert {
            margin: 0.5rem 0 !important;
            padding: 0.5rem !important;
        }
        
        /* –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —É markdown */
        .stMarkdown {
            margin: 0 !important;
        }
        
        .stMarkdown > div {
            margin: 0 !important;
        }
        
        /* –ö–∞–ª–µ–Ω–¥–∞—Ä—å */
        .calendar-container {
            padding: 0.5rem;
            margin: 0;
            background: rgba(43, 43, 43, 0.7);
            border-radius: 8px;
            border: 1px solid rgba(255, 215, 0, 0.1);
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown(
        """
        <div class="header-container">
            <h1>–°–í–û–ë–û–î–ù–´–ï –°–õ–û–¢–´</h1>
            <div class="subtitle">–ë–†–ê–¢–ö–û–í–°–ö–ò–ô<br class="mobile-break"> –ï–í–ì–ï–ù–ò–ô<br class="mobile-break"> –í–ò–ö–¢–û–†–û–í–ò–ß</div>
            <div class="form-description">
                –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ - 1 —á–∞—Å.<br>
                –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: —Å 9:00 –¥–æ 18:00 (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤—Å—Ç—Ä–µ—á–∞ –≤ 17:00)<br>
                –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
            </div>
        </div>

        <!-- –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã -->
        <script>
            function getMillisecondsUntilMidnight() {
                const now = new Date();
                const midnight = new Date(now);
                midnight.setHours(24, 0, 0, 0);
                return midnight - now;
            }

            function scheduleRefresh() {
                const msUntilMidnight = getMillisecondsUntilMidnight();
                setTimeout(function() {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    window.location.reload();
                    // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    scheduleRefresh();
                }, msUntilMidnight);
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            scheduleRefresh();

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            function updateNextRefreshTime() {
                const msUntilMidnight = getMillisecondsUntilMidnight();
                const hoursLeft = Math.floor(msUntilMidnight / (1000 * 60 * 60));
                const minutesLeft = Math.floor((msUntilMidnight % (1000 * 60 * 60)) / (1000 * 60));
                
                const refreshInfo = document.getElementById('next-refresh-info');
                if (refreshInfo) {
                    refreshInfo.textContent = `–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: ${hoursLeft}—á ${minutesLeft}–º`;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                setTimeout(updateNextRefreshTime, 60000);
            }

            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            document.addEventListener('DOMContentLoaded', function() {
                const refreshInfo = document.createElement('div');
                refreshInfo.id = 'next-refresh-info';
                refreshInfo.className = 'refresh-info';
                document.querySelector('.header-container').appendChild(refreshInfo);
                updateNextRefreshTime();
            });
        </script>

        <style>
        /* –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */
        .refresh-info {
            font-size: 0.9rem;
            color: #888;
            margin-top: 1rem;
            text-align: center;
            font-style: italic;
            opacity: 0.8;
            transition: opacity 0.3s ease;
        }

        .refresh-info:hover {
            opacity: 1;
        }

        @media screen and (max-width: 768px) {
            .refresh-info {
                font-size: 0.8rem;
                margin-top: 0.8rem;
            }
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É —Å—Ç–∞—Ç—É—Å–æ–≤
    st.markdown(
        """
        <div class="slot-status">
            <div class="status-item">
                <div class="status-dot available"></div>
                –î–æ—Å—Ç—É–ø–Ω–æ
            </div>
            <div class="status-item">
                <div class="status-dot unavailable"></div>
                –ó–∞–Ω—è—Ç–æ
            </div>
        </div>
        """,
        unsafe_allow_html=True,
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ refresh_token
    if not st.secrets.get("google_refresh_token"):
        st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OAuth. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        st.stop()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–∞—Ö
    try:
        slots_info = get_available_slots(datetime.now())
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: {str(e)}")
        return

    if not slots_info:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏")
        return

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–ª–æ—Ç–æ–≤ –ø–æ –¥–Ω—è–º
    slots_by_day = {}
    for slot, info in slots_info:
        day = info["date"].strftime("%Y-%m-%d")
        if day not in slots_by_day:
            slots_by_day[day] = []
        slots_by_day[day].append((slot, info))

    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π
    st.markdown('<div class="show-more-days">', unsafe_allow_html=True)
    st.checkbox("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏", key="show_all_days")
    st.markdown("</div>", unsafe_allow_html=True)

    # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    st.markdown('<div class="calendar-container">', unsafe_allow_html=True)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –ø–æ –¥–Ω—è–º —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    sorted_days = sorted(slots_by_day.keys())
    days_to_show = sorted_days if st.session_state.show_all_days else sorted_days[:3]

    for day in days_to_show:
        slots = slots_by_day[day]
        date_obj = datetime.strptime(day, "%Y-%m-%d")
        formatted_date = date_obj.strftime("%d/%m/%Y")
        weekday = date_obj.strftime("%A")

        st.markdown(
            f"""
            <div class="date-header">
                <h3>{formatted_date} ¬∑ {weekday}</h3>
            </div>
        """,
            unsafe_allow_html=True,
        )

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (6 –∫–æ–ª–æ–Ω–æ–∫)
        cols = st.columns(6)
        for i, (slot, info) in enumerate(slots):
            with cols[i % 6]:
                if info["is_busy"]:
                    st.markdown(
                        f'<button class="unavailable" disabled>{info["formatted"]}</button>',
                        unsafe_allow_html=True,
                    )
                else:
                    if st.button(
                        info["formatted"],
                        key=f"slot_{slot.isoformat()}",
                        use_container_width=True,
                        type="secondary",
                    ):
                        st.session_state.selected_slot = slot
                        st.session_state.show_booking_form = True

    st.markdown("</div>", unsafe_allow_html=True)

    # –§–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if "show_booking_form" in st.session_state and st.session_state.show_booking_form:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (31/12/2025, 13:00)
        selected_time = st.session_state.selected_slot.strftime("%d/%m/%Y, %H:%M")

        st.markdown('<div class="booking-form">', unsafe_allow_html=True)
        st.markdown(
            f"""
            <div class="form-header">üìù –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏</div>
            <div class="form-description">
            <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> {selected_time}<br>
            <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 1 —á–∞—Å<br><br>
            –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email-–∞–¥—Ä–µ—Å.<br>
            –í—ã –ø–æ–ª—É—á–∏—Ç–µ:
            <ul>
                <li>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</li>
                <li>–°—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É</li>
                <li>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –≤—Å—Ç—Ä–µ—á–∏</li>
            </ul>
            </div>
            """,
            unsafe_allow_html=True,
        )

        with st.form("booking_form"):
            booker_email = st.text_input(
                "üìß –í–∞—à email –∞–¥—Ä–µ—Å",
                help="–ù–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—Ç–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∏",
                placeholder="zhenyabratkovski5@gmail.com",
            )
            submitted = st.form_submit_button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")

            if submitted:
                if not booker_email:
                    st.session_state.messages.append(
                        ("error", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å")
                    )
                    st.error("Please enter your email address")
                else:
                    if create_calendar_event(
                        st.session_state.selected_slot, booker_email
                    ):
                        if send_email_notification(
                            st.session_state.selected_slot.strftime("%d/%m/%Y %H:%M"),
                            booker_email,
                        ):
                            st.session_state.messages.append(
                                (
                                    "success",
                                    "üéâ –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É.",
                                )
                            )
                            st.success(
                                "üéâ Meeting successfully booked! Check your email for details."
                            )
                        st.session_state.show_booking_form = False
                        st.rerun()
        st.markdown("</div>", unsafe_allow_html=True)


if __name__ == "__main__":
    main()
